package pl.hubertkuch.jdocify.integrations;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import pl.hubertkuch.jdocify.renderer.MarkdownRenderer;
import pl.hubertkuch.jdocify.vo.ClassData;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.List;
import java.util.stream.Collectors;

public class VitePressIntegration implements Integration {

    private static final Logger log = LoggerFactory.getLogger(VitePressIntegration.class);
    private final MarkdownRenderer markdownRenderer;
    private final Path outputDir;

    public VitePressIntegration(MarkdownRenderer markdownRenderer, Path outputDir) {
        this.markdownRenderer = markdownRenderer;
        this.outputDir = outputDir.resolve("docs");
    }

    public void run(List<ClassData> classes) throws IOException {
        log.info("Exporting {} classes to VitePress structure at: {}", classes.size(), outputDir);
        Files.createDirectories(outputDir);

        for (var classData : classes) {
            var renderedMarkdown = markdownRenderer.render(classData);
            var classFilePath = outputDir.resolve(classData.name() + ".md");
            Files.writeString(classFilePath, renderedMarkdown, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
            log.debug("Wrote documentation for class: {}", classFilePath);
        }

        generateIndexPage(classes);

        generateSidebarConfig(classes);

        log.info("VitePress export completed successfully.");
    }

    private void generateIndexPage(List<ClassData> classes) throws IOException {
        log.info("Generating main index.md page.");
        var indexContent = new StringBuilder();
        indexContent.append("# API Documentation\n\n");
        indexContent.append("Welcome to the API documentation. Here you can find information about the classes in this project.\n\n");
        indexContent.append("## Classes\n\n");

        for (var classData : classes) {
            indexContent.append("- [").append(classData.name()).append("](./").append(classData.name()).append(".md)\n");
        }

        var indexPath = outputDir.resolve("index.md");
        Files.writeString(indexPath, indexContent.toString(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
    }

    private void generateSidebarConfig(List<ClassData> classes) throws IOException {
        log.info("Generating VitePress sidebar configuration.");
        var configDir = outputDir.resolve(".vitepress");
        Files.createDirectories(configDir);

        var sidebarItems = classes.stream()
                                  .map(cls -> String.format("{ text: '%s', link: '/%s' }", cls.name(), cls.name()))
                                  .collect(Collectors.joining(",\n          "));

        var sidebarJsContent = String.format("""
                // This file is auto-generated by JDocify.
                // Do not edit this file directly.

                export default {
                  '/': [
                    {
                      text: 'API Classes',
                      items: [
                        %s
                      ]
                    }
                  ]
                }
                """, sidebarItems);

        var sidebarPath = configDir.resolve("sidebar.js");
        Files.writeString(sidebarPath, sidebarJsContent, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
    }
}
