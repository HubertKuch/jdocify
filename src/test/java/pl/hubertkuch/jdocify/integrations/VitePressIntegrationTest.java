package pl.hubertkuch.jdocify.integrations;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import pl.hubertkuch.jdocify.renderer.MarkdownRenderer;
import pl.hubertkuch.jdocify.vo.ClassData;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collections;
import java.util.List;
import java.util.regex.Pattern;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

class VitePressIntegrationTest {

    private MarkdownRenderer markdownRenderer;

    @TempDir
    private Path tempDir;

    private VitePressIntegration vitePressIntegration;

    @BeforeEach
    void setUp() {
        // Use a real MarkdownRenderer mock to control its output
        markdownRenderer = mock(MarkdownRenderer.class);
        vitePressIntegration = new VitePressIntegration(markdownRenderer, tempDir);
    }

    @Test
    void run_shouldCreateAllFilesAndDirectoriesForGivenClasses() throws IOException {
        // Arrange
        var class1 = new ClassData("MyClass1", "com.example", null, null, null);
        var class2 = new ClassData("MyClass2", "com.example", null, null, null);
        List<ClassData> classes = List.of(class1, class2);

        when(markdownRenderer.render(class1)).thenReturn("# MyClass1 Docs");
        when(markdownRenderer.render(class2)).thenReturn("# MyClass2 Docs");

        // Act
        vitePressIntegration.run(classes);

        // Assert
        Path docsDir = tempDir.resolve("docs");
        assertTrue(Files.isDirectory(docsDir), "docs directory should be created");

        // Verify class markdown files
        Path class1Path = docsDir.resolve("MyClass1.md");
        assertTrue(Files.exists(class1Path), "Markdown for MyClass1 should exist");
        assertEquals("# MyClass1 Docs", Files.readString(class1Path));

        Path class2Path = docsDir.resolve("MyClass2.md");
        assertTrue(Files.exists(class2Path), "Markdown for MyClass2 should exist");
        assertEquals("# MyClass2 Docs", Files.readString(class2Path));

        verify(markdownRenderer, times(1)).render(class1);
        verify(markdownRenderer, times(1)).render(class2);

        // Verify index.md
        Path indexPath = docsDir.resolve("index.md");
        assertTrue(Files.exists(indexPath), "index.md should exist");
        String expectedIndexContent = """
                # API Documentation

                Welcome to the API documentation. Here you can find information about the classes in this project.

                ## Classes

                - [MyClass1](./MyClass1.md)
                - [MyClass2](./MyClass2.md)
                """;
        assertEquals(expectedIndexContent, Files.readString(indexPath).replace("\r\n", "\n"));

        // Verify sidebar.js
        Path sidebarPath = docsDir.resolve(".vitepress/sidebar.js");
        assertTrue(Files.exists(sidebarPath), "sidebar.js should exist");
        String expectedSidebarContent = """
                // This file is auto-generated by JDocify.
                // Do not edit this file directly.

                export default {
                  '/': [
                    {
                      text: 'API Classes',
                      items: [
                        { text: 'MyClass1', link: '/MyClass1' },
                          { text: 'MyClass2', link: '/MyClass2' }
                      ]
                    }
                  ]
                }
                """;
        assertEquals(expectedSidebarContent, Files.readString(sidebarPath).replace("\r\n", "\n"));
    }

    @Test
    void run_shouldHandleEmptyClassListGracefully() throws IOException {
        // Arrange
        List<ClassData> emptyList = Collections.emptyList();

        // Act
        vitePressIntegration.run(emptyList);

        // Assert
        Path docsDir = tempDir.resolve("docs");
        assertTrue(Files.isDirectory(docsDir), "docs directory should be created");

        // Verify index.md is created but has no classes
        Path indexPath = docsDir.resolve("index.md");
        assertTrue(Files.exists(indexPath));
        String indexContent = Files.readString(indexPath);
        assertTrue(indexContent.contains("## Classes\n\n"));

        // Verify sidebar.js is created but has no items
        Path sidebarPath = docsDir.resolve(".vitepress/sidebar.js");
        assertTrue(Files.exists(sidebarPath));
        String sidebarContent = Files.readString(sidebarPath);
        Pattern emptyItemsPattern = Pattern.compile("items:\\s*\\[\\s*]");
        boolean matchFound = emptyItemsPattern.matcher(sidebarContent).find();

        assertTrue(matchFound, "Sidebar items should be empty");

        verify(markdownRenderer, never()).render(any(ClassData.class));
    }
}